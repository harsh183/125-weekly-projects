---
layout: post
title: Backends
date: 2020-07-06
comments: true
external-url:
tag: TypeScript
toc: true
---

<!-- markdownlint-disable MD004 MD009 MD014 MD024 MD040 -->

Any website has two parts: a frontend and a backend. The backend handles our logic and data storage and communciates via URLs, but instead of sending web pages, it only sends data.

Now, let's create something simple with `Express` to show a basic backend service in action.

```ts
console.log("Hello express");
```

Hosted by: Monika Para
## Installation

For this tutorial, we will need to have the following installed on your device

- [NodeJS](https://nodejs.org/en/). Check to see if you have the latest version installed on your device by typing ``node -v`` on your terminal
- [Postman](https://www.postman.com/downloads/) This will help us visualize the API requests we make. Make an account using either your UIUC Login or GMail you used to make your Github account 

## Setting Up Your Project

First, we create a folder for the project 

```js
$ mkdir express-api
$ cd express-api
```

Then we use `npm` to start setting up the initial boilerplate of the project.

```js
$ npm init
```

After this we set up `expressJS`. This is the framework that actually allows us to make a simple backend by just passing a few functions around.

```js 
$ npm install --save express
$ npm install express body-parser morgan``
```

Make sure to create a `.gitingore` file with the following content

```js
node_modules
```

This prevents us from pushing all our library code to `git` which makes our project sizes much smaller.

## Making Your First Express Server

First we import `express` and create our first web server.

```js
// Creating a web server in express
var express = require("express");
var app = express(); 
// runs express server by running 'node app.js' on terminal
app.listen(3000, () => {
    console.log("Server running on http://localhost:3000");
});
```

Once you have the following code in your `app.js` file, run `node app.js` and you should get a message on your terminal saying `Server running on http://localhost:3000` Navigate to that URL and you have made your first Express server - congratulations!

But if you try this, you get an error saying your API has no requests set up. Let's create our first API action:

```js
// homepage GET request
app.get("/", (req, res) => {
    res.send("Hello, Express!"); 
});
```
 
Now if you rerun it and go to `localhost:3000`, now it should say `Hello, Express!`. Yay! Now the setup is done and the fun part begins. 

## Understanding CRUD

CRUD is probably one of the most important concepts in backend development. This acronym refers to the 4 broad actions we do with any web backend. Let's consider this with Reddit, but you'll quickly realize this works for any site.

* Create - Create new data. For example: creating a reddit post 
* Read - Look up existing data. For example: looking at a post 
* Update - Update data that already exists. For example: adding an edit to fix a typo.
* Delete - Remove existing data. For example: removing a post

## Making Your First GET Request

Include the following code before running your server

```js 
const bodyParser = require('body-parser'); 
app.use(bodyParser.json()); 
```

```js  
  // initialize array of things that make you happy
  // @TODO: reformat in JSON
  const happyArr = [{
    id: 1,
    title: 'suzie sheep'
  },
  {
    id: 2,
    title: 'peppa pig'
  },
  {
    id: 3,
    title: 'boba'}
  ];
``` 

```js
  // GET request for values that make you happy 
  app.get('/happiness', function(req, res) {
    return res.send(happyArr);
  });
```

Now that you have made your own JSON object and URL, you can navigate to ``http://localhost:3000/happiness`` 
  
## GET Request by ID

```js
  // GET request for happy item by id
  app.get('/happiness/:id', (req, res) => {
  const happy = happyArr.find(g => g.id === parseInt(req.params.id));
  if (!happy) {
    return res.status(404).send('The value with the given ID was not found :(');
  }
  res.send(happy);
  });
```

## POST Request

```js
  // POST request to add an item on Postman
  app.post('/happiness', function(req, res) {
      const happy = {
        id: happyArr.length + 1,
        title: req.body.title
      }
    happyArr.push(happy);
    res.send(happy);
  });
```

## DELETE Request

```js
// DELETE request to delete a field on Postman
  app.delete('/happiness/:id', function(req, res) {
  const happy = happyArr.find(g => g.id === parseInt(req.params.id));
  if (!happy) {
    return res.status(404).send('The value with the given ID was not found, sad');
  }
  const index = happyArr.indexOf(happy);
  happyArr.splice(index, 1);
  res.send(happy);
});
```

## Seeing Your Requests on Postman

Insert your target URL on Postman 

## Motivation

[Hackers and Painters](http://www.paulgraham.com/hp.html) - A bit old, but perhaps my favorite essay of all time on the nature of CS and how we work. This essay portrays computer science as creative work rather than the typical connection to applied math, science or engineering. It's a long essay but definitely worth revisiting every few months. Also, it was written by one of the most iconic people in the tech startup space for starting YCombinator, Paul Graham.

## Learn more

- [What is CRUD](https://www.codecademy.com/articles/what-is-crud)
- [RapidAPI](https://rapidapi.com/blog/nodejs-express-rest-api-example/)
- [Build A Simple Express API](https://medium.com/@onejohi/building-a-simple-rest-api-with-nodejs-and-express-da6273ed7ca9)
- [APIs using MongoDB](https://medium.com/@dinyangetoh/how-to-build-simple-restful-api-with-nodejs-expressjs-and-mongodb-99348012925d)

## Ethics

- [MuleSoft Blog - Exploring the ethics of APIs](https://blogs.mulesoft.com/api-integration/strategy/ethics-of-apis/)

## International Community of Open Source

FOSS (Free and Open Source Software) initially started in the West Coast of the US, but grew to encompass projects and contributors from all over the world. A lot of the commercial software out there today is still mostly limited to a narrow set of countries, but open source software doesn't have to deal with immigration restrictions. Entire communities of software developers from Africa, South America, East Asia, East Europe and more are able to contribute to open source software making is a very global concept. Many country's are even starting [to make laws](https://fossbytes.com/world-open-source-map-which-countries-have-open-source-laws/) to boost open source contribution. Check out some of the [contribution data](https://hoffa.medium.com/github-top-countries-201608-13f642493773) here.

## Ideas
- Build a Soccer API that gives information about a team player's name, number, total points, and team the belong to
## Requirements

* You should show it off in your README.md file, with animations/video and an explanation of the game.
<!-- Game? -->
* Has to use a Open Source license via a `LICENSE` file
  
Contributors: Harsh, Maaheen
