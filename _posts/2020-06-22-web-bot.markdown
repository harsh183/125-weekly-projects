---
layout: post
title: Web Bots
date: 2020-06-22
comments: true
external-url:
categories: Python
---

<!-- markdownlint-disable MD004 MD009 MD014 MD024 MD040 -->

Automation is fun! What if we could do fancy stuff through automation with the web browser?

```python
print("Hello Browser")
```

Hosted by: Harsh Deep

## Motivation

[On the Subject of Talent](https://drawabox.com/article/talent) - this is advice for artists, but in my experience, a lot of good art advice also applies to programming. We are more alike than a lot of people realize.

## Workshop

* cs 225 slide+notes downloader (though can be adapted to basically any course) - use similar approaches for any of your classes
* we start at home page
* we extract and find the lecture button url
* we request that
* for each week we create a folder called `week<n>` where n is 1.16
* we get the date we save `<date>_slides.pdf` and `<date>_handout.pdf` where date is what we scraped

## Learn more

* A few weeks ago I held a workshop on Web Bots as well where I covered `webbrowser` and `selenium`. I _highly_ reccomend those. [Slides](https://wacky-web-bots.netlify.app/dist/125.html), [Code](https://github.com/harsh183/sail21-whacky-web-bots/tree/main/workshop_code/cs125) and [Video](https://www.youtube.com/watch?v=07YsSpcDjHI).

* `scrapy` is a more serious framework for writing web scraping spiders in python. Take a look at a starter tutorial [here](https://docs.scrapy.org/en/latest/intro/tutorial.html)

* Web bots are commonly used for testing. [pytest-selenium](https://pytest-selenium.readthedocs.io/en/latest/user_guide.html) combines `pytest` with `selenium`. Here is another guide on [beautifulsoup testing](https://www.tutorialspoint.com/python_web_scraping/python_web_scraping_testing_with_scrapers.htm) which combines it with `unittest`.

## Ideas

## Requirements

* You should show it off in your README.md file, with animations/video and an explanation of the game.

* Has to use a Open Source license via a `LICENSE` file
