---
layout: post
title: Micro
date: 2020-05-15
comments: true
external-url:
categories: Tools
---

## What all is there

There are different levels of editors that programmers use while writing their 
programs. I'll explain a couple.

* Interactive shell - you write out a single line of code and see the result. Great for experimenting, but these can get tiring for real programs. Python has a nice one called IDLE. These are also called REPL 
(Read-Evaluate-Print-Loop).

* Text editor - these are for writing out programs as files. You write out
the entire program and then execute it. These often have syntax highlighting
and some special language support. Generally, these are quite simple and barebones.
E.g. Nano, micro, vim, emacs. 

* IDE - stands for Integrated Development Environment. These have file exploring,
terminals, code editors, generators, git, and many other tools 
programmers use, all in one application for high productivity. These are great and I
love them, but I suggest against these for people starting out precisely because
they do so much. I will get you moving up in that direction soon enough.
E.g. Visual Studio, PyCharm, IntelliJ

* Notebooks - These are interactive shells where you can execute multiple 
lines at  time (generally 4-5). These are mostly used for statistics,
machine learning and other data work because they can show plots and tables very 
nicely. We'll use these when we get to data work, so don't worry about this
yet.
Ex. R Notebooks, Jupyter Notebooks. 

## What you will learn

1. Micro - a text editor. Very simple and great to start with.
3. Visual Studio Code - a bridge between text editors and IDEs.

I'll introduce VSCode when we start `JavaScript` and `TypeScript`. For now, let's learn micro.

# Micro

Micro is a 1000x improvement from another standard text editor called nano.

I like it because it's quite simple, and it's pretty decent for getting started 
without much of a learning curve. You can use simple keyboard shortcuts that you're already 
used to and simple mouse inputs. I like it for its simplicity.

If you've never used a command line text editor before, I highly reccomend micro because it makes you pay attention to the details of your code. You can use it as a stepping stone to more powerful editors like `vim` or `emacs`. It also has good mouse support, which is really helpful when starting out.

In a way, my reasoning is quite similar to [making artists start with fine liners](https://drawabox.com/article/ink) because it makes people pay attention to what they're writing without relying on assistive tools too much. (On a side note, Sakura and Steadler fine liners are great.)

## Download

**Note that when there is a `$` in instructions, it means to run it in the command line.**

### Package managers

You can install micro using Homebrew on Mac:

```
$ brew install micro
```

**Note for Mac:** All micro keybindings use the control or alt (option) key, not the command
key.

On Linux, you can install micro through [snap](https://snapcraft.io/docs/core/install)

```
$ snap install micro --classic
```

**Note for Linux:** for interfacing with the local system clipboard, `xclip` or `xsel`
must be installed. Please see the section on [Linux clipboard support](https://github.com/zyedidia/micro#linux-clipboard-support)
further below.

Micro is also available through other package managers on Linux such as apt, dnf, AUR, Nix, and package managers for other operating systems. These packages are not guaranteed to be up-to-date.

## Linux: Available in distro-specific package managers.

* `$ apt install micro` (Ubuntu 20.04 `focal`, and Debian `unstable | testing | buster-backports`). At the moment, this package (2.0.1-1) is outdated and has a known bug where debug mode is enabled.

* `$ dnf install micro` (Fedora).

* `$ pacman -S micro` (Arch Linux).

* `$ eopkg install micro` (Solus).

* See [wiki](https://github.com/zyedidia/micro/wiki/Installing-Micro) for details about CRUX, Termux.

## Windows: [Chocolatey](https://chocolatey.org) and [Scoop](https://github.com/lukesampson/scoop).

* `$ choco install micro`.

* `$ scoop install micro`.

## OpenBSD: Available in the ports tree and also available as a binary package.

* `$ pkd_add -v micro`.

## NetBSD, macOS, Linux, Illumos, etc. with [pkgsrc](http://www.pkgsrc.org/)-current:

* `$ pkg_add micro`

If none of this works, try

```
$ curl https://getmic.ro | bash
```

See more on their [website](https://micro-editor.github.io/) and [documentation](https://github.com/zyedidia/micro#installation), where the above information is adapted from.

## Using it

1. Opening it. We can open it anywhere saying `micro <name of file>`. 
   If you don't give a file name it asks you later. For example,
   ```
   $ micro hello.py
   ```

2. Code
   Here's an example of a program. Type this out. You can write any Python program this way.
   ```python
   print("Hello, World!")
   ```

3. Save. Hit Command+S on your keyboard to save the program.

4. Quit. Hit Command+Q and you're back. If you forgot to save it'll ask you
y/n to decide if you want to save.

5. Run your program. You can execute any Python program using `python <name of file>` or `python3 <name of file>`, depending on which version of Python you're using.
   ```bash
   $ python hello.py
   $ python3 hello.py
   ```
   Which shows the output
   ```
   Hello, World!
   ```

## Exercise

Write a program that adds two numbers which are colleced via user input on *micro*. The point of this 
is to give you practice using the editor. Remember that in Python, we use `input()` to collect keyboard input.

The output should look something like
```
Enter the first number: 5
Enter the second number: 20
The sum is 25!
```