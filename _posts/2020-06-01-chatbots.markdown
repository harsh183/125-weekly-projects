---
layout: post
title: Chatbots
date: 2020-06-01
comments: true
external-url:
tag: Python
---

<!-- markdownlint-disable MD004 MD009 MD014 MD024 MD040 -->

With the pandemic, we all started using online chatting applications more than ever before to communicate with our families, friends, and even classes and work. What if we could make cool bots for these chats? A Facebook bot for your store, a Discord bot for your friends, or a Slack bot for your clubs and jobs. The possibilities are endless.

If you've never done Python before, here is a start. Coming from Java or C++, this might seem almost underwhelming, but Python allows you do to so many of the same things with a lot less work. This does have disadvantages, but this trait of Python makes it a great language for trying new ideas and adding to them quickly.

```python
print("Hello Chatbots")
```

Hosted by: Harsh Deep

## Motivation

[Introduction to Learn Python the Hard Way](https://learnpythonthehardway.org/python3/intro.html) - This is advice I honestly feel everyone new to CS should read and follow.

Keeping that in mind, for this website:

### How to learn programming the proper way

* Every single piece of code that I show, you will type by hand. No copy pasting, no "I can see what it does, it's obvious", no "I already know this, let me move on". I want you to do this to make sure that you actually process what we're learning together. You can only copy paste if I tell you that you can. Trust me. It may feel like a small difference, but not following along like this will reduce the effectiveness of whatever you learn tenfold.
* Attention to detail: this comes from the last point, but when you type everything out yourself and look at it closely, you're forced to concentrate on what you're doing. For example, consider the difference between 5 and "5". Programming is highly precise, and errors like these can create bugs that can be quite difficult to track down if you're not prepared for them. Especially in languages like Python, every tiny detail matters.

## Tools

Set this up before we start.

* VSCode [Our written guide](/micro) but otherwise the general intertnet is good to

* `git` - install it locally and enter `$ git --version` to check if it has installed in your terminal.

* Github - create an account

## Getting Ready

You should finish this part before the workshop, but don't worry if you're not done since we're recording everything. All the material is written as text on the website as well.

1. If you're on Windows, I *highly* reccomend getting WSL2 (WSL 1 is also fine, just slower). For historical reasons, the command line in Windows is just not as good as Mac or Linux. Eventually, they just said, "Hey what if we had full\* Linux *on* Windows?" Thus, WSL. We will use the command line a fair amount here so it's a very good idea to have this set up.

2. Install a recent version of Python (3.7+) on your computer and make sure to enable `pip` as well. <!-- TODO: Add more detail from web bot workshop maybe -->

3. Set up the VSCode or a different code editor of your choice. See the page we wrote for [VSCode](/vscode) for help.

4. Install `discord.py`

    ```js
    $ pip install discord.py
    [install output]
    ```

5. Create an account on [discord](https://discord.com). The principles of making chat bots are the same regardless of platform but discord has really nice support.

6. Create a test Discord server (sometimes called a guild) that you will add your bot to. You can add it to a real server once it's working well but this is good for debugging. [Guide](https://www.howtogeek.com/318890/how-to-set-up-your-own-discord-chat-server/)

## Workshop

First we create a new folder for the project by typing this into your command line. In general if there is a `$` before a code line it means run it on your command line. This is a convention not just for this site, but programming tutorials in general.

```js
$ mkdir first_discord_bot
$ cd first_discord_bot
```

`mkdir` stands for make directory (another word for folder) and this is how we create a folder wherever we are. 

`cd` stands for change directory. So here we're just creating a folder and switching to it. The command line prompt can only point to one folder at a time and this is how we change where it's pointing to.

Now we set up `git` in folder transforming our project into a `git` repository. 

```js
$ git init
```

You've probably seen `git` before, it basically adds time travel powers to your work. `git` lets you put your code on sites like [Gitlab](https://about.gitlab.com/), [Github](https://github.com/) and [sr.ht](https://sr.ht/).

Now let's get started with the coding. Let's open VSCode:

```js
$ code .
```

Note: Don't worry too much about the command line or `git` just yet, more on that next week :)

### Getting the bot token

Note: [This tutorial](https://www.freecodecamp.org/news/create-a-discord-bot-with-python/) also has a good section on getting the discord bot token.

1. Go to the discord [applications page](https://discord.com/developers/applications) on your *web browser*.

2. Click on "New Application" and give it a nice name that you can recognize. Feel free to give an icon too but that's optional.

3. Go to the Bot page on the side tab and click "Add Bot". This is the bot that we'll be coding and the user they see. Feel free to change the username but the default one should be fine.

4. Scroll down to "TOKEN" and click the "Copy" button. This token is the password of sorts of your bot and is required for your program to log in. Tokens are a common pattern when dealing with APIs and external services (like discord here). 

5. The important thing is that you should never, ever, share this token with anyone. One classic mistake people do is acidentally adding it on their online Git repository or stored somewhere that someone can just inspect browser state for it. This paper [paper](https://www.ndss-symposium.org/wp-content/uploads/2019/02/ndss2019_04B-3_Meli_paper.pdf) explains how hundreds of thousands of codebases have made this mistake. To deal with this we keep a seperate `BOT_TOKEN.txt` file and read from it.

6. We 

## Open Source License 

A lot of people incorrectly assume that just publicly posting a project on Github makes a project open source. However you have to explicitly add a License to your project. For all the projects you make, a **license is mandatory**. [Here](https://opensource.org/licenses) is a link to the guide to the popular open source licenses today. Adding one shouldn't take more than a few minutes.

If you're unsure/lazy you can go for either MIT, ApacheV2, or GPL. 

## Learn More

* [FreeCodeCamp: How to Create a Discord Bot for Free with Python â€“ Full Tutorial](https://www.freecodecamp.org/news/create-a-discord-bot-with-python/) - good starter tutorial

* [Real Python: How to Make a Discord Bot in Python](https://realpython.com/how-to-make-a-discord-bot-python/) - this is the most comprehensive tutorial I liked

* [towards data science - How to build your own AI Chatbot on Discord?](https://towardsdatascience.com/how-to-build-your-own-ai-chatbot-on-discord-c6b3468189f4) - more advanced but this shows how you can start mixing in AI with chatbots as well

## Ideas

Feel free to come up with anything you want as long as it's chatbot related. Here are some ideas to help you get started, but feel free to come up with more. Don't worry if it's already been done or if someone else is doing it. The point is learning and fun. :)

* Think of a bot you've seen in real life. Could you recrete a simple subset of its features?

* Maybe a bot that could provide the user information, like recipes or your sports teams?

* Or maybe a bot that can have basic conversation with you. Could it help you break down tasks or provide you with a gratitude journal?

* Maybe a bot that can automate something you find annoying? So you can use it to fire off commands to do some task.

* The bot doesn't have to be a Discord bot. You can make it on Slack, Facebook, IRC, or basically any chat service out there.

## Requirements

These aren't hard requirements, but you should try your best to hit all of them.

* The chat bot connects to a real chat service, including, but not limited to: Discord, Slack, Telegram, IRC, Facebook.

* It has different responses based on different inputs.

* This has to be available on a site like Github (feel free to use alternatives like GitLab if you prefer).

* Show images/animations/videos of your bot in action in a `README.md` file in your repository.

* Has to use a Open Source license via a `LICENSE` file

Contributors: Harsh, Maaheen
