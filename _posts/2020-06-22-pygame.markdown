---
layout: post
title: Games
date: 2020-06-22
comments: true
external-url:
tag: Python
toc: true
---

<!-- markdownlint-disable MD004 MD009 MD014 MD024 MD040 -->

Many people got into CS by playing video games and wanting to make more. Even if you didn't, learning how to make something simple and fun is quite rewarding, not to mention nice to show off to other people.

```python
print("Hello pygame!")
```

Hosted by: Harsh Deep

## Motivation

* Comic: [IRA GLASS: Advice for beginners](http://www.zenpencils.com/comic/90-ira-glass-advice-for-beginners/)

## Install

```bash
pip install pygame
```

## Workshop

First we will import the following. Well be using them later. <br>
``
import sys, pygame, random
``
Now we can begin coding! Every pygame script begins with the following line:
```
pygame.init()
```
This initializes the libary and sets up everything we need to do. We can then:
```
size = width, height = 500, 500

screen = pygame.display.set_mode(size)
```
Here we are declaring our width height and size variables. We are then using a built in pygame function to create our screen. <br></br>

Every game has what is called a game loop. This loop goes on for the lifespan of the game and is where we put all of our game logic.
```
clock = pygame.time.Clock()
while 1:
    clock.tick(60)
    screen.fill((0, 0, 0))
    pygame.display.flip()
```
Here weve done the following. We have set our tick rate to 60 fps using the built in pygame function. We then fill our screen with black(this will become more clear later), and update the display. However at this point you should be unable to see a window on your screen. That is because we are yet to handle the event queue:
```
for event in pygame.event.get():
  if event.type == pygame.QUIT: sys.exit()
```
The event queue is simply a queue of all the events that have occured in your game. We can loop through these and determine if we care about any of these events. Here we only care if the event is quit in which case we dip. 
## Learn more

* [Geeks for Geeks: Introduction to pygame](https://www.geeksforgeeks.org/introduction-to-pygame/) - a simple intro for getting started. They have 2-3 other articles that are worth checking out as well.

* [Real Python: PyGame: A Primer on Game Programming in Python](https://realpython.com/pygame-a-primer/) - an extensive intro to pygame.

* Pygame official examples [code](https://github.com/pygame/pygame/tree/main/examples) and [documentation](https://www.pygame.org/docs/ref/examples.html) - here are a lot of sample games and their code. Some might be simpler than others. You can run all of them, poke around their code, and even modify it to understand how things work. Some of this stuff can be advanced, but it's a great way to learn.

## Ethics

* [What we still havenâ€™t learned from Gamergate](https://www.vox.com/culture/2020/1/20/20808875/gamergate-lessons-cultural-impact-changes-harassment-laws) - the rise of gaming and gaming subcultures is a really cool way computer science has hit the world today, however, it also has had many issues with gender diversity in the past. Here's a hindsight look from a large scale issue from 2014 and what it led to after.

## Open Source - Permissive vs Copyleft Licenses

In open source licenses there are two _broad_ categories that most fall under called Permissive and Copyleft. 

Permissive licenses include ones like `MIT` or `ApacheV2`. These basically say do _whatever_ with the code and if you add the same code over then you often have to include the license too. These are popular for small projects, when people don't care too much, and when they want their open source software to be good enough for commercial use. The workshop repos use this for example.

Copyleft licenses are stronger, such as `GPLv3`, where they want your development of the software to also have the same freedoms the software was available under. Basically that means that your work has to also end up open source. This is often used by large projects like `linux` or by people who want to increase the spread of Open Source. This type of license also makes it hard for commercial use since most of the software is proprietary (i.e., not open source). The repo for the workshops site itself uses GPLv3 as the template uses GPLv3.

For these weekly projects, use any license as long as it's _some_ open source license. 

There is much debate on these two and these two links will be a good start to read more: 

* [Open Source Stack Exchange - What's the difference between permissive and copyleft licenses?](https://opensource.stackexchange.com/questions/21/whats-the-difference-between-permissive-and-copyleft-licenses)

* [Draw DeVault -  My personal journey from MIT to GPL](https://drewdevault.com/2019/06/13/My-journey-from-MIT-to-GPL.html)

## Ideas

Feel free to come up with anything you want as long as it's chatbot related. Here are some ideas to help you get started, but feel free to come up with more. Don't worry if it's already been done or if someone else is doing it. The point is learning and fun. :)

* What kind of games do you like to play? Could you make a simplified version of one of them?

* Were there any examples that you found interesting? Could you recreate some of that functionality on your own (without copying, of course)?

<!-- TODO: add more -->
## Requirements

* It should use `pygame`.

* You should show it off in your README.md file, with animations/video and an explanation of the game.

* Has to use an Open Source license via a `LICENSE` file

* Have a `README.md` with explanation about what your project does, how to install it, how to contribute, and how to use it. Check out [HackerGirl's Art of Readme](https://github.com/hackergrrl/art-of-readme).

Contributors: Harsh, Maaheen
