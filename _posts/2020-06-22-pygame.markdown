---
layout: post
title: Games
date: 2020-06-22
comments: true
external-url:
tag: Python
toc: true
---

<!-- markdownlint-disable MD004 MD009 MD014 MD024 MD033 MD040 -->

Many people got into CS by playing video games and wanting to make more. Even if you didn't, learning how to make something simple and fun is quite rewarding, not to mention nice to show off to other people.

Note: If you're using WSL/WSL2 this won't work due to windowing issues so make sure your install of python is local. 

```python
print("Hello pygame!")
```

Hosted by: Harsh Deep

## Motivation

* Comic: [IRA GLASS: Advice for beginners](http://www.zenpencils.com/comic/90-ira-glass-advice-for-beginners/)

## Install

```bash
pip install pygame
```

## Workshop

First we will import the following. We'll be using them later. <br>

```js
import sys, pygame, random
```

Now we can begin coding! Every pygame script begins with the following line:

```python
pygame.init()
```

This initializes the libary and sets up everything we need to do. We can then:

```python
size = width, height = 500, 500

screen = pygame.display.set_mode(size)
```

Here we are declaring our width height and size variables. We are then using a built in pygame function to create our screen. <br></br>

Every game has what is called a game loop. This loop goes on for the lifespan of the game and is where we put all of our game logic.

```python
clock = pygame.time.Clock()
while 1:
    clock.tick(60)
    screen.fill((0, 0, 0))
    pygame.display.flip()
```

Here weve done the following. We have set our tick rate to 60 fps using the built in pygame function. We then fill our screen with black(this will become more clear later), and update the display. However at this point you should be unable to see a window on your screen. That is because we are yet to handle the event queue:

```python
for event in pygame.event.get():
  if event.type == pygame.QUIT: sys.exit()
```

The event queue is simply a queue of all the events that have occured in your game. We can loop through these and determine if we care about any of these events. Here we only care if the event is quit in which case we dip.
### Setting up Main Character
We will use OOP to work with defining or characters. Handily pygames also lets us extend a sprite class that provides us with some useful functionality. We will
```python
class MainCharacter(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)
        # image
        # rect
        self.image = pygame.image.load("./image0.jpg")
        self.image = pygame.transform.scale(self.image, (50, 50))

        self.rect = self.image.get_rect()
        self.rect.center = (250,250)
```
Each sprite requires it has an image and a rect so that pygame can draw it out. We also have defined self.rect.center so the sprite can start in the middle.<br>
### Putting the Main Character in a group <br>
In pygame groups are used to 'group' similar characters so we can operate on them all at once. To define a group before you game loop put:
```
main = MainCharacter()

main_sprite = pygame.sprite.Group()
main_sprite.add(main)
```
Once our mainCharacter is in a group we can also draw it out. Insert ``main_sprite.draw(screen)`` inside of your loop. You should now see an image in the center of your screen.
### Handling keyboard input.
Introduce a speed array at the top:
```python
speed = [0,0]
```
We will use this to handle moving with the keyboard, inserting the following in your game loop
```python
key = pygame.key.get_pressed()

    if (key[pygame.K_a]):
        if (speed[0] > -20):
            speed[0] -= 1.5
    if (key[pygame.K_d]):
        if (speed[0] < 20):
            speed[0] += 1.5
    if (key[pygame.K_w]):
        if (speed[1] > -20):
            speed[1] -= 1.5
    if (key[pygame.K_s]):
        if (speed[1] < 20):
            speed[1] += 1.5
```
``pygame.key.get_pressed`` returns a dictionary with whether or not that key has been pressed. We can then handle the case for each key. However notice once you click it does not slow down. Lets introduce some slow down behavior:
```python
    if (speed[0] > 0):
        speed[0] -= .5
    elif (speed[0] < 0):
        speed[0] += .5


    if (speed[1] > 0):
        speed[1] -= .5
    elif (speed[1] < 0):
        speed[1] += .5
```
Now you should be slowing down after you release the key. But we can go off screen. To fix that we will:
```python
    if main.rect.left < 0 or main.rect.right > width:
        speed[0] = -speed[0] * 1.5
    if main.rect.top < 0 or main.rect.bottom > height:
        speed[1] = -speed[1] * 1.5
```
### Bad Guy Class
```python
class Corona(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)
        self.image = pygame.image.load("./image0.jpg")
        self.image = pygame.transform.scale(self.image, (10, 10))
        self.rect = self.image.get_rect()
        self.badSpeed = [3, 3]
        self.rect.center = (random.randint(0,500), random.randint(0,500))
    def update(self):
        self.rect = self.rect.move(self.badSpeed)

        if self.rect.left < 0 or self.rect.right > width:
            self.badSpeed[0] = -self.badSpeed[0] * 1.5
            self.badSpeed[1] = self.badSpeed[1] * random.uniform(.5, 1.1)
        if self.rect.top < 0 or self.rect.bottom > height:
            self.badSpeed[1] = -self.badSpeed[1] * 1.5
            self.badSpeed[0] = self.badSpeed[0] * random.uniform(.5, 1.1)

        if (self.badSpeed[0] > 6):
            self.badSpeed[0] -= .5
        if (self.badSpeed[0] < -6):
            self.badSpeed[0] += .5

        if (self.badSpeed[1] > 6):
            self.badSpeed[1] -= .5
        if (self.badSpeed[1] < -6):
            self.badSpeed[1] += .5
```
The only thing that should look relatively unfamiliar here is the inclusion of an update method. This is because it is inherited from the sprite class and we can call update on an entire group, and it will run that update method for each indivisual sprite. We are also using random.uniform() to introduce directional variation in our bad guys.<br>

We can then add them to a group 
```python
badSprites = pygame.sprite.Group()

for i in range(0, 3):
    badSprites.add(Corona())
```
If we introduce the line ``badSprites.update()`` inside of our game loop followed by a ``badSprites.draw(screen)`` we should see them hopping around the screen.

### Handling Collisions
Augment or main character class to handle lives. There are many ways of doing this I chose:
```python
class MainCharacter(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)
        # image
        # rect
        self.image = pygame.image.load("/Users/ahmed/Desktop/image0.jpg")
        self.image = pygame.transform.scale(self.image, (50, 50))

        self.rect = self.image.get_rect()
        self.rect.center = (250,250)
        self.totalLives = 5
        self.lastHit = 0
    def update(self):
        self.lastHit = pygame.time.get_ticks()
        self.totalLives -= 1

        if (self.totalLives <= 0):
            sys.exit()
 ```
 We can then insert the following into our game loop:
```python
    collisions = pygame.sprite.spritecollideany(main, badSprites)

    if (collisions != None):
        if (pygame.time.get_ticks() - main.lastHit > 1000):
            main_sprite.update()
```
``pygame.sprite.spritecollideany(main, badSprites)`` returns either None or a sprite name that collided. If its not None we know there is a collision and if it has been outside of the grace period of the last hit we go ahead and call update to deduct a life.

## Learn more

* [Geeks for Geeks: Introduction to pygame](https://www.geeksforgeeks.org/introduction-to-pygame/) - a simple intro for getting started. They have 2-3 other articles that are worth checking out as well.

* [Real Python: PyGame: A Primer on Game Programming in Python](https://realpython.com/pygame-a-primer/) - an extensive intro to pygame.

* Pygame official examples [code](https://github.com/pygame/pygame/tree/main/examples) and [documentation](https://www.pygame.org/docs/ref/examples.html) - here are a lot of sample games and their code. Some might be simpler than others. You can run all of them, poke around their code, and even modify it to understand how things work. Some of this stuff can be advanced, but it's a great way to learn.

## Ethics

* [What we still havenâ€™t learned from Gamergate](https://www.vox.com/culture/2020/1/20/20808875/gamergate-lessons-cultural-impact-changes-harassment-laws) - the rise of gaming and gaming subcultures is a really cool way computer science has hit the world today, however, it also has had many issues with gender diversity. Here's a hindsight look from a large scale issue from 2014 and what it led to after.

## Open Source - Permissive vs Copyleft Licenses

In open source licenses there are two _broad_ categories that most fall under called Permissive and Copyleft. 

Permissive licenses include ones like `MIT` or `ApacheV2`. These basically say do _whatever_ with the code and if you add the same code over then you often have to include the license too. These are popular for small projects, when people don't care too much, and when they want their open source software to be good enough for commercial use. The workshop repos use this for example.

Copyleft licenses are stronger, such as `GPLv3`, where they want your development of the software to also have the same freedoms the software was available under. Basically that means that your work has to also end up open source. This is often used by large projects like `linux` or by people who want to increase the spread of Open Source. This type of license also makes it hard for commercial use since most of the software is proprietary (i.e., not open source). The repo for the workshops site itself uses GPLv3 as the template uses GPLv3.

For these weekly projects, use any license as long as it's _some_ open source license. 

There is much debate on these two and these two links will be a good start to read more: 

* [Open Source Stack Exchange - What's the difference between permissive and copyleft licenses?](https://opensource.stackexchange.com/questions/21/whats-the-difference-between-permissive-and-copyleft-licenses)

* [Draw DeVault -  My personal journey from MIT to GPL](https://drewdevault.com/2019/06/13/My-journey-from-MIT-to-GPL.html)

## Ideas

Feel free to come up with anything you want as long as it's chatbot related. Here are some ideas to help you get started, but feel free to come up with more. Don't worry if it's already been done or if someone else is doing it. The point is learning and fun. :)

* What kind of games do you like to play? Could you make a simplified version of one of them?

* Were there any examples that you found interesting? Could you recreate some of that functionality on your own (without copying, of course)?

* It doesn't have to be a game (though that is more fun), it can even just be some animation or some interactive art. 

* Have fun with images and custom backgrounds too, for example a main character can have your profile picture or something.

<!-- TODO: add more -->
## Requirements

* It should use `pygame`.

* You should show it off in your README.md file, with animations/video and an explanation of the game.

* Has to use an Open Source license via a `LICENSE` file

* Have a `README.md` with explanation about what your project does, how to install it, how to contribute, and how to use it. Check out [HackerGirl's Art of Readme](https://github.com/hackergrrl/art-of-readme).

Contributors: Ahmed, Harsh, Maaheen
